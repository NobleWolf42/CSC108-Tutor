
2.11 Integer division and modulo
Division: Integer rounding
When the operands of / are integers, the operator performs integer division, which does not generate any fraction.
PARTICIPATION
ACTIVITY 2.11.1: Integer division does not generate any fraction.
The / operator performs floating-point division if at least one operand is a floating-point type.
PARTICIPATION
ACTIVITY 2.11.2: Division.
Determine the result. Some expressions only use literals to focus attention on the operator, but most practical expressions include
variables.
1)  13 / 3  
2)  4 / 9  
3)  (5 +  10 + 15) * (1 / 3)  
4)  x / y   where int x = 10 and int y = 4.
5)  10 / 4.0  
6)  x / y   where int x = 10 and double y = 4.0.
Division: Divide by 0
For integer division, the second operand of / or % must never be 0, because division by 0 is mathematically undefined. A divide-by-zero
error occurs at runtime if a divisor is 0, causing a program to terminate. A divide-by-zero error is an example of a runtime error, a severe
error that occurs at runtime and causes a program to terminate early. In the example below, the program terminates and outputs the error
message "Floating point exception" when the program attempts to divide by daysPerYear, which is 0.
Figure 2.11.1: Divide-by-zero example: Compute salary per day.
#include <iostream>
using namespace std;
int main() {
   int salaryPerYear; // User input: Yearly salary
   int daysPerYear;   // User input: Days worked per year
   int salaryPerDay;  // Output:     Salary per day
   cout << "Enter yearly salary: ";
   cin  >> salaryPerYear;
   
   cout << "Enter days worked per year: ";
   cin  >> daysPerYear;
   // If daysPerYear is 0, then divide-by-zero causes program termination.
   salaryPerDay = salaryPerYear / daysPerYear;
   cout << "Salary per day is: " << salaryPerDay << endl;
   return 0;
}
Enter yearly salary: 60000
Enter days worked per year: 0
Floating point exception
PARTICIPATION
ACTIVITY 2.11.3: More integer division.
Determine the result. Type "Error" if the program would terminate due to divide-by-zero. Only literals appear in these expressions to
focus attention on the operators; most practical expressions include variables.
1) 100 / 2
2) 100 * (1 / 2)
3) 100 * 1 / 2
4) 100 / (1 / 2)
5) x = 2;
y = 5;
z = 1 / (y - x - 3);
Modulo (%)
The basic arithmetic operators include not just +, -, *, /, but also %. The modulo operator (%) evaluates the remainder of the division of two
integer operands. Ex: 23 % 10 is 3.
Examples:
9 % 5 is 4. Reason: Since 9 = 5 * 1 + 4, the integer division 9 / 5 results in 1, and the remainder is 4.
70 % 7 is 0. Reason: 70 / 7 is 10 with remainder 0.
1 % 2 is 1. Reason: 1 / 2 is 0 with remainder 1.
10 % 4.0 is not valid. "Remainder" only makes sense for integer operands.
Figure 2.11.2: Division and modulo example: Minutes to hours/minutes.
#include <iostream>
using namespace std;
int main() {
   int userMinutes;   // User input: Minutes
   int outHours;      // Output hours
   int outMinutes;    // Output minutes (remaining)
   cout << "Enter minutes: ";
   cin  >> userMinutes;
   outHours   = userMinutes / 60;
   outMinutes = userMinutes % 60;
   cout << userMinutes << " minutes is ";
   cout << outHours    << " hours and ";
   cout << outMinutes  << " minutes." << endl;
   return 0;
}
Enter minutes:  137
137 minutes is 2 hours and 17 minutes.
...
Enter minutes:  180
180 minutes is 3 hours and 0 minutes.

ACTIVITY 2.11.4: Modulo.
Determine the result. Type "Error" if appropriate. Only literals appear in these expressions to focus attention on the operators; most
practical expressions include variables.
1)  50 % 2   
2)  51 % 2   
3)  5 % 3   
4)  27 % 4   
5)  596 % 10   
6)  100 % (1 / 2)   
7)  100.0 % 40  
PARTICIPATION
ACTIVITY 2.11.5: Integer division and modulo.
A florist wants to create as many bunches of 12 flowers as possible. totalFlowers holds the total number of flowers available.
1) Complete the statement to assign numBunches with the maximum
number of bunches that can be made.
numBunches  = ;
2) Using only the variable totalFlowers, complete the statement to
assign remainingFlowers with the number of remaining flowers after
creating as many bunches of 12 as possible.
remainingFlowers = ;
Why parentheses matter
The following summary of a dialog on a popular programmer discussion forum shows the importance of using parentheses, in
this case in an expression involving modulo.
CHALLENGE
ACTIVITY 2.11.1: Enter the output of the integer expressions.
620890.5010016.qx3z qy7 
Modulo examples
Modulo has several useful applications. Below are just a few.
Example 2.11.1: Random number in range.
Given a random number randNum, % can generate a random number within a range:
randNum % 10
Yields 0 - 9: Possible remainders are 0, 1, ..., 8, 9. Remainder 10 is not possible: Ex: 19 % 10 is 9, but 20 % 10 is 0.
randNum % 51
Yields 0 - 50: Note that % 50 would yield 0 - 49.
(randNum % 9) + 1
Yields 1 - 9: The % 9 yields 9 possible values 0 - 8, so the + 1 yields 1 - 9.
(randNum % 11) + 20
Yields 20 - 30: The % 11 yields 11 possible values 0 - 10, so the + 20 yields 20 - 30.
Example 2.11.2: Getting digits.
Given a number, % and / can be used to get each digit. For a 3-digit number userVal like 927:
onesDigit     = userVal % 10;    // Ex: 927 % 10 is 7. 
tmpVal        = userVal / 10;
tensDigit     = tmpVal % 10;     // Ex: tmpVal = 927 / 10 is 92. Then 92 % 10 is 2.
tmpVal        = tmpVal / 10;
hundredsDigit = tmpVal % 10;     // Ex: tmpVal = 92 / 10 = 9. Then 9 % 10 is 9.
Example 2.11.3: Get prefix of a phone number.
Given a 10-digit phone number stored as an integer, % and / can be used to get any part, such as the prefix. For phoneNum =
1365551212 (whose prefix is 555):
tmpVal = phoneNum / 10000; // / 10000 shifts right by 4, so 136555. 
prefixNum = tmpVal % 1000; // % 1000 gets the right 3 digits, so 555.
Dividing by a power of 10 shifts a value right. 321 / 10 is 32. 321 / 100 is 3.
% by a power of 10 gets the rightmost digits. 321 % 10 is 1. 321 % 100 is 21.
PARTICIPATION
ACTIVITY 2.11.6: Modulo examples.
1) Given a non-negative number x, which yields a number in the range 5
- 10?
x % 5
x % 10
x % 11
(x % 6) + 5
2) Given a non-negative number x, which expression has the range -10
to 10?
x % -10
(x % 21) - 10
(x % 20) - 10
3) Which gets the tens digit of x. Ex: If x = 693, which yields 9?
x % 10
x % 100
(x / 10) % 10
4) Given a 16-digit credit card number stored in x, which gets the last
(rightmost) four digits? (Assume the fourth digit from the right is non-
zero).
x / 10000
x % 10000
CHALLENGE
ACTIVITY 2.11.2: Integer division and modulo.
620890.5010016.qx3z qy7 
Integer variables totalBudget and frameCost are read from input. Assign numFrames with the maximum number of frames that
can be made with a budget of totalBudget, if each frame costs frameCost to make.
Ex: If the input is 13 4, then the output is:
Maximum number of frames: 3
1
2
3
How was this section? | 
y = 10 / 4;
2.5x
2
y = 3 / 4;
0 .75x
0
a = (1 / 2) * b * h
0 ...
0
f = c * (9/5) + 32
1
Always 0 Always c*1 + 32
int w = 10;
int x = 4;
y = w / x;
2
int w = 10;
double x = 4.0;
y = w / x;
2.5
1. If both operands of / are integers, the operator performs integer division: No fractional part is generated. Thus 10 / 4 is 2, not 2.5.
And 3 / 4 is 0, not 0.75.
2. Programmers may forget, causing strange logic errors. (1/2) * b * h is always (0) * b * h or 0. And c * (9/5) + 32 is always c * (1) +
32.
3. The same applies for integer variables. No fraction is generated for y = w / x if w and x are int type, even if y is a floating-point
type.
4. If at least one operand of / is a floating-point type, then floating-point division occurs. So if int w = 10 and double x = 4.0, then w /
x is 2.5.


Type the program's output
#include <iostream>
using namespace std;
int main() {
   int x;
   int y;
   x = 2;   
   y = 2 * (x + 9);
   
   cout << x << " " << y;
   return 0;
}
2 22
2 3 4 5
1
2
3
4
5

#include  <iostream>
using  namespace  std ;
int  main ( )  {
   int  totalBudget ;
   int  frameCost ;
   int  numFrames ;
   cin  >>  totalBudget ;
   cin  >>  frameCost ;
   /* Your code goes here */
   cout  <<  " Maximum number of frames: "  <<  numFrames  <<  endl ;
   return  0 ;
}